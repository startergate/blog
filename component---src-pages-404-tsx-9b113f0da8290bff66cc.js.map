{"version":3,"sources":["webpack:///./src/components/images/image.tsx","webpack:///./src/pages/404.tsx"],"names":["Image","src","props","data","useStaticQuery","match","React","allFile","edges","find","node","relativePath","matchLightMode","sources","childImageSharp","fluid","srcIfLightMode","media","NotFoundPage","title","className","id","style","width","height","alt","href"],"mappings":"gNAwDeA,EApDD,SAAC,GAAsB,IAApBC,EAAoB,EAApBA,IAAQC,EAAY,uBAC7BC,EAAOC,yBAAe,cAiBtBC,EAAQC,WACZ,kBAAMH,EAAKI,QAAQC,MAAMC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcT,IAAQS,EAAKC,kBACzD,CAACR,EAAMF,IAGT,GAAII,EAAO,CACT,IAAIO,EACAC,EAAUR,EAAMK,KAAKI,gBAAgBC,MAqBzC,OAnBIb,EAAMc,iBACRJ,EAAiBN,WACf,kBACEH,EAAKI,QAAQC,MAAMC,MACjB,gBAAGC,EAAH,EAAGA,KAAH,OAAcR,EAAMc,iBAAmBN,EAAKC,kBAEhD,CAACR,EAAMD,EAAMc,oBAGbH,EAAU,CACRR,EAAMK,KAAKI,gBAAgBC,MADnB,iBAGHH,EAAeF,KAAKI,gBAAgBC,MAHjC,CAINE,MAAO,oCAMR,gBAAC,IAAD,eAAKF,MAAOF,GAAaX,IAEhC,OAAO,M,UCrBIgB,UAtBM,kBACnB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAM,mBACX,2BACEC,UAAU,kBACVC,GAAG,YACHC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAEhC,2BACE,uBAAKJ,UAAU,aACb,0BAAQA,UAAU,mCAAlB,KACA,gBAAC,EAAD,CAAOA,UAAU,cAAcnB,IAAK,aAAcwB,IAAK,MACvD,0BAAQL,UAAU,eAAlB,MAEF,uCACA,yDACA,qBAAGM,KAAK,KAAR","file":"component---src-pages-404-tsx-9b113f0da8290bff66cc.js","sourcesContent":["import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Image = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 512) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  if (match) {\n    let matchLightMode;\n    let sources = match.node.childImageSharp.fluid;\n\n    if (props.srcIfLightMode) {\n      matchLightMode = React.useMemo(\n        () =>\n          data.allFile.edges.find(\n            ({ node }) => props.srcIfLightMode === node.relativePath\n          ),\n        [data, props.srcIfLightMode]\n      );\n      if (matchLightMode) {\n        sources = [\n          match.node.childImageSharp.fluid,\n          {\n            ...matchLightMode.node.childImageSharp.fluid,\n            media: `(prefers-color-scheme: light)`,\n          },\n        ];\n      }\n    }\n\n    return <Img fluid={sources} {...props} />;\n  } else {\n    return null;\n  }\n};\n\nexport default Image;\n","import * as React from 'react';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nimport Image from '../components/images/image';\n\nimport './404.css';\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <section\n      className=\"title not-found\"\n      id=\"not-found\"\n      style={{ width: '100%', height: '100vh' }}\n    >\n      <div>\n        <div className=\"not-found\">\n          <strong className=\"not-found-character not-found-4\">4</strong>\n          <Image className=\"not-found-0\" src={'pacman.png'} alt={'0'} />\n          <strong className=\"not-found-4\">4</strong>\n        </div>\n        <h1>NOT FOUND</h1>\n        <p>this page does not exist lol</p>\n        <a href=\"/\">pls go to main page</a>\n      </div>\n    </section>\n  </Layout>\n);\n\nexport default NotFoundPage;\n"],"sourceRoot":""}